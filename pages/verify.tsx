import React from "react";
import type { NextPage } from "next";
import Head from "next/head";
import NextLink from "next/link";
import {
  Button,
  Text,
  Container,
  Box,
  Heading,
  Flex,
  Image,
} from "@chakra-ui/react";
import { WarningIcon, CheckCircleIcon } from "@chakra-ui/icons";
import QRCode from "react-qr-code";
import axios from "axios";

const Home: NextPage = () => {
  const [status, setStatus] = React.useState<
    "initial" | "loading" | "verified" | "failed"
  >("initial");

  const [verifyQRCodeUrl, setverifyQRCodeUrl] = React.useState("");
  const [metadata, setMetadata] = React.useState<any>();

  const intervalMs = 10000;

  React.useEffect(() => {
    const intervalId = setInterval(() => {
      getPresentationResponse();
    }, intervalMs);
    return () => {
      clearInterval(intervalId);
    };
  }, []);

  const getPresentationResponse = () => {
    axios
      .get("/api/verifier/presentation-response")
      .then(function (response) {
        console.log(response.data);
        setMetadata(response.data.openBadgeMetadata);
        setStatus("failed");
      })
      .catch(function (err) {
        setStatus("failed");
      });
  };

  const getVerifyQRCode = async () => {
    axios
      .get("/api/verifier/presentation-request")
      .then(function (response) {
        setverifyQRCodeUrl(response.data.url);
      })
      .catch(function (err) {
        setStatus("failed");
      });
  };

  return (
    <>
      <Head>
        <title>OpenBadge to ION VC Converter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <NextLink href={"/"}>
          <Heading my="8">OpenBadge to ION VC Converter</Heading>
        </NextLink>
        {status == "initial" && (
          <>
            <Flex w="full" align={"center"} direction={"column"}>
              <Text>Get a Verify QR Code and present your VC</Text>
              <Button
                w="full"
                my="4"
                colorScheme="teal"
                onClick={() => getVerifyQRCode()}
              >
                Get a Verify QR Code
              </Button>
              <Box mt="4">
                {verifyQRCodeUrl ? <QRCode value={verifyQRCodeUrl} /> : <></>}
              </Box>
            </Flex>
          </>
        )}
        {status == "verified" && (
          <>
            <Flex w="full" align={"center"} direction={"column"}>
              {metadata.image.id ? (
                <Image
                  src={metadata.image.id}
                  width="2xs"
                  height="auto"
                  alt=""
                ></Image>
              ) : (
                <></>
              )}
              <CheckCircleIcon mt="8" w={24} h={24} color="green.500" />
              <Text align="center" fontSize="lg" mt="2">
                Credential Verified
              </Text>
              <Button
                w="full"
                colorScheme="teal"
                my="4"
                onClick={() => setStatus("initial")}
              >
                Try again
              </Button>
            </Flex>
          </>
        )}
        {status == "failed" && (
          <Flex w="full" align={"center"} direction={"column"}>
            <WarningIcon w={24} h={24} color="red.500" />
            <Text my="4">Verification failed. Reason: </Text>
            <Button
              w="full"
              colorScheme="teal"
              my="4"
              onClick={() => setStatus("initial")}
            >
              Try again
            </Button>
          </Flex>
        )}
      </Container>
    </>
  );
};

export default Home;
